Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.


Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.



public class ThreeSum {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        HashSet<List<Integer>> set = new HashSet<>();
        List<List<Integer>> output = new ArrayList<>();

        for (int i = 0; i < nums.length - 2; i++) {
            int f = i + 1;
            int s = nums.length - 1;

            while (f < s) {
                if (nums[f] + nums[s] + nums[i] > 0) {
                    s--;
                } else if (nums[f] + nums[s] + nums[i] < 0) {
                    f++;
                } else if (nums[f] + nums[s] == -nums[i]) {
                    List<Integer> triplet = Arrays.asList(nums[i], nums[f], nums[s]);
                    set.add(triplet);
                    f++;
                    s--;
                }
            }
        }

        output.addAll(set);
        return output;
    }
}
